<?php

// Fetch the BCP47 data first:
// wget -O "language-subtag-registry.txt" https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry

$filename_in = "language-subtag-registry.txt";
$filename_out = "bcp47-languages.php";

function read_data($filename) {
	if (!file_exists($filename)) {
		print "Could not find language-subtag-registry.txt";
		exit;
	}

	$file = file_get_contents($filename);

	// Remove trailing whitespace to avoid errors when splitting lines later on
	$file = trim($file);

	// Lines starting with whitespace are a continuation of the previous line (word wrapping)
	$file = preg_replace("/\n\s+/m", " ", $file);

	// Entries are separated by %% on a separate line
	return explode("\n%%\n", $file);
}

function parse_record($record) {
	$entry = [];
	$lines = explode("\n", $record);

	foreach ($lines as $line) {
		// Each line is a key-value pair in the form "key: value"
		list($key, $value) = explode(": ", $line, 2);

		// Description and Prefix can have multiple values, so use an array
		if ($key === "Description" || $key === "Prefix") {
			if (!array_key_exists($key, $entry)) {
				$entry[$key] = [];
			}
			array_push($entry[$key], $value);
		} else {
			$entry[$key] = $value;
		}
	}

	return $entry;
}

$output = [
	"<?php",
	"// This file is generated by extract-bcp47-languages.php. Do not edit it directly.",
	"",
	"\$languageNames = [",
];

// Parse entries
foreach (read_data($filename_in) as $record) {
	$entry = parse_record($record);

	if (!array_key_exists("Type", $entry)) {
		// Skip the metadata entry which only has "File-Date"
		continue;
	}

	if (array_key_exists("Deprecated", $entry)) {
		// Skip deprecated codes (still valid, but probably not very useful)
		continue;
	}

    if ($entry["Type"] != "language") {
		// Skip entries that aren't languages
		continue;
	}

	if (array_key_exists("Scope", $entry)) {
		if ($entry["Scope"] === "private-use") {
			// Skip private-use tags (qaa to qtz)
			continue;
		}

		if ($entry["Scope"] === "collection") {
			// Skip language families (from ISO 639-2/5)
			continue;
		}
	}

	array_push($output, "\t'". $entry["Subtag"] ."' => '". addslashes($entry["Description"][0]) . "',");
}

array_push($output, "];");
file_put_contents($filename_out, join("\n", $output));

